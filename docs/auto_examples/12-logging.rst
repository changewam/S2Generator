
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\12-logging.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_12-logging.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_12-logging.py:


The logging for :math:`S^2` Generator
=======================================

The core of the :math:`S^2` data generation mechanism is to randomly construct a large number of symbolic expressions (complex systems) :math:`f(\cdot)` and stimulus time series :math:`X`, and obtain the response of the complex system by inputting the stimulus into the complex system:

.. math::
   Y = f(X).

However, in this process, since the generated symbolic expression :math:`f(\cdot)` has a domain, for example, the domain of :math:`f(x) = \mathrm{ln} (x)` is :math:`x \in (0, + \infty ]`, the domain of :math:`f(x) = \frac{1}{x}` is :math:`x \in \Set{ x \mid x \ne 0 }`.Although we usually replace :math:`f(x) = \mathrm{ln}(x)` and :math:`f(x) = \frac{1}{x}` with :math:`f(x) = \mathrm{ln}(|x|)` and :math:`f(x) = \frac{1}{x + \varepsilon}` respectively when constructing symbolic expressions to increase the range of their domains without changing their symbolic operation logic, there are still many cases where the values fall outside the domain. When this happens, we will abandon the time series data and generate a new :math:`X` for resampling.
 
In addition, since we use the power operation pow and exponent exp when constructing the complex system $f(\cdot)$, numerical explosion may occur when performing numerical sampling. To this end, we will limit the value of the response time series to a certain range to improve the quality of the basic representation of the time series data.
 
For these two reasons, we provide a status monitoring module for the data generation process. This module allows you to intuitively determine whether the stimulus time series data is successfully sampled and how many times it has been successfully sampled. You can specify the ``print_status`` and ``logging_path`` parameters in ``Generator`` to print and log status information during the execution of the data generation algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 19-25

.. code-block:: Python

    import numpy as np

    # Importing data generators, parameter controllers and visualization functions
    from S2Generator import Generator, SeriesParams, SymbolParams, plot_series









.. GENERATED FROM PYTHON SOURCE LINES 26-42

.. code-block:: Python


    # Create an instance and print the status for the generation
    generator = Generator(print_status=True)

    # Creating a random number object
    rng = np.random.RandomState(0)

    # Start generating symbolic expressions, sampling and generating series
    trees, x, y = generator.run(
        rng, input_dimension=1, output_dimension=1, n_inputs_points=256
    )

    # Visualize the time series
    fig = plot_series(x, y)





.. image-sg:: /auto_examples/images/sphx_glr_12-logging_001.png
   :alt: Input Data, Output Data
   :srcset: /auto_examples/images/sphx_glr_12-logging_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Basic Config of The S2Generator:
      mixed_distribution:  0.1                 autoregressive_moving_average: 0.2                 
      forecast_pfn:        0.35                kernel_synth:        0.25                
      intrinsic_mode_function: 0.1                 
      Min Binary Operator: 0                   Max Binary Operator: 1                   
      Min Unary Operator:  0                   Max Unary Operator:  5                   
      Max Trials:          64                  Solve Diff           0                   
      Probability Random:  0.25                Probability Const:   0.25                

    Generation Config of The S2Generator:
      Time Series Length:  256                   Max Trials:          64                  
      Input Dimension:     1                     Output Dimension:    1                   
      Input Normalization: z-score               Output Normalization: z-score             
      Input Max Scale:     16.0                  Output Max Scale:    16.0                
      Offset               None                

    The Specific Execution Process of S2Generator:
    -------------------------------------------------------------------------------
     Index | Target                               | Time                | Results
    -------+--------------------------------------+---------------------+----------
     1     | Create the Symbolic Expression       | 2025-09-21 11:55:01 | success 
     2     | Generate Excitation Time Series 1    | 2025-09-21 11:55:01 | success 
     3     | Generate Response Time Series 1      | 2025-09-21 11:55:01 | failure 
     4     | Generate Excitation Time Series 2    | 2025-09-21 11:55:01 | success 
     5     | Generate Response Time Series 2      | 2025-09-21 11:55:01 | success 
    -------------------------------------------------------------------------------

    The Generated Symbolic Expression: 
    (73.5 add (x_0 mul (((9.38 mul cos((-0.092 add (-6.12 mul x_0)))) add (87.1 mul arctan((-0.965 add (0.973 mul rand))))) sub (8.89 mul exp(((4.49 mul log((-29.3 add (-86.2 mul x_0)))) add (-2.57 mul ((51.3 add (-55.6 mul x_0)))**2)))))))
    
    Running Time: 
    0.04549





.. GENERATED FROM PYTHON SOURCE LINES 43-56

.. code-block:: Python


    # Add the params `logging_path` to save the stats
    generator = Generator(print_status=True, logging_path=".")

    # Start generating symbolic expressions, sampling and generating series
    trees, x, y = generator.run(
        np.random.RandomState(1), input_dimension=1, output_dimension=1, n_inputs_points=256
    )

    # Visualize the time series
    fig = plot_series(x, y)





.. image-sg:: /auto_examples/images/sphx_glr_12-logging_002.png
   :alt: Input Data, Output Data
   :srcset: /auto_examples/images/sphx_glr_12-logging_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Basic Config of The S2Generator:
      mixed_distribution:  0.1                 autoregressive_moving_average: 0.2                 
      forecast_pfn:        0.35                kernel_synth:        0.25                
      intrinsic_mode_function: 0.1                 
      Min Binary Operator: 0                   Max Binary Operator: 1                   
      Min Unary Operator:  0                   Max Unary Operator:  5                   
      Max Trials:          64                  Solve Diff           0                   
      Probability Random:  0.25                Probability Const:   0.25                

    Generation Config of The S2Generator:
      Time Series Length:  256                   Max Trials:          64                  
      Input Dimension:     1                     Output Dimension:    1                   
      Input Normalization: z-score               Output Normalization: z-score             
      Input Max Scale:     16.0                  Output Max Scale:    16.0                
      Offset               None                

    The Specific Execution Process of S2Generator:
    -------------------------------------------------------------------------------
     Index | Target                               | Time                | Results
    -------+--------------------------------------+---------------------+----------
     1     | Create the Symbolic Expression       | 2025-09-21 11:55:01 | success 
     2     | Generate Excitation Time Series 1    | 2025-09-21 11:55:01 | success 
     3     | Generate Response Time Series 1      | 2025-09-21 11:55:01 | success 
    -------------------------------------------------------------------------------

    The Generated Symbolic Expression: 
    (0.846 add ((0.265 mul sqrt((45.7 add (38.8 mul rand)))) add (62.8 mul sqrt((((-2.6 mul x_0) sub (90.4 mul tan((0.382 add (9.34 mul 1))))) add (-0.016 mul ((6.56 add (0.244 mul x_0)))**2))))))
    
    Running Time: 
    0.00311





.. GENERATED FROM PYTHON SOURCE LINES 57-66

.. code-block:: Python


    # We can also generate the multivariate input and output time series
    trees, x, y = generator.run(
        rng, input_dimension=4, output_dimension=4, n_inputs_points=256
    )

    # Visualize the time series
    fig = plot_series(x, y)




.. image-sg:: /auto_examples/images/sphx_glr_12-logging_003.png
   :alt: Input Data, Output Data
   :srcset: /auto_examples/images/sphx_glr_12-logging_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Basic Config of The S2Generator:
      mixed_distribution:  0.1                 autoregressive_moving_average: 0.2                 
      forecast_pfn:        0.35                kernel_synth:        0.25                
      intrinsic_mode_function: 0.1                 
      Min Binary Operator: 0                   Max Binary Operator: 1                   
      Min Unary Operator:  0                   Max Unary Operator:  5                   
      Max Trials:          64                  Solve Diff           0                   
      Probability Random:  0.25                Probability Const:   0.25                

    Generation Config of The S2Generator:
      Time Series Length:  256                   Max Trials:          64                  
      Input Dimension:     4                     Output Dimension:    4                   
      Input Normalization: z-score               Output Normalization: z-score             
      Input Max Scale:     16.0                  Output Max Scale:    16.0                
      Offset               None                

    The Specific Execution Process of S2Generator:
    -------------------------------------------------------------------------------
     Index | Target                               | Time                | Results
    -------+--------------------------------------+---------------------+----------
     1     | Create the Symbolic Expression       | 2025-09-21 11:55:01 | success 
     2     | Generate Excitation Time Series 1    | 2025-09-21 11:55:01 | success 
     3     | Generate Response Time Series 1      | 2025-09-21 11:55:01 | failure 
     4     | Generate Excitation Time Series 2    | 2025-09-21 11:55:01 | success 
     5     | Generate Response Time Series 2      | 2025-09-21 11:55:01 | failure 
     6     | Generate Excitation Time Series 3    | 2025-09-21 11:55:01 | success 
     7     | Generate Response Time Series 3      | 2025-09-21 11:55:01 | failure 
     8     | Generate Excitation Time Series 4    | 2025-09-21 11:55:01 | success 
     9     | Generate Response Time Series 4      | 2025-09-21 11:55:01 | failure 
     10    | Generate Excitation Time Series 5    | 2025-09-21 11:55:01 | success 
     11    | Generate Response Time Series 5      | 2025-09-21 11:55:01 | failure 
     12    | Generate Excitation Time Series 6    | 2025-09-21 11:55:01 | success 
     13    | Generate Response Time Series 6      | 2025-09-21 11:55:01 | success 
    -------------------------------------------------------------------------------

    The Generated Symbolic Expression: 
    (0.995 add ((31.0 mul x_1) sub (52.8 mul ((x_3 mul (diff(((0.846 mul x_1) sub (0.915 mul rand))) mul ((-20.9 mul x_0) sub (-0.607 mul x_2)))) mul x_1))))
    (-22.6 add ((-9.7 mul inv((-0.03 add (0.456 mul x_2)))) add ((-37.1 mul (rand mul x_1)) sub (-5.34 mul x_3))))
    (-66.6 add (0.274 mul x_1))
    (-34.1 add (-0.646 mul x_1))
    
    Running Time: 
    0.25835






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.585 seconds)


.. _sphx_glr_download_auto_examples_12-logging.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 12-logging.ipynb <12-logging.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 12-logging.py <12-logging.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 12-logging.zip <12-logging.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
