

.. rubric:: Related examples

.. raw:: html

    <div class="sphx-glr-thumbnails">

.. thumbnail-parent-div-open

.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="Time series data serves as the external manifestation of complex dynamical systems. This method aims to generate diverse complex systems represented by symbolic expressions f(\cdot) — through unconstrained construction. It simultaneously generates excitation time series X \in \mathbb{R} ^ {M \times L}, which are then fed into the complex systems to produce their responses Y=f(X) \in \mathbb{R} ^ {N \times L}. Here, M, N and L denote the number of input channels, output channels, and series length, respectively.">

.. only:: html

  .. image:: /auto_examples/images/thumb/sphx_glr_1-basic_demo_thumb.png
    :alt:

  :ref:`sphx_glr_auto_examples_1-basic_demo.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">The Demo of S^2 Generator for Series-Symbol Data Generation</div>
    </div>


.. only:: not html

 * :ref:`sphx_glr_auto_examples_1-basic_demo.py`

.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="在 exmaple 1 中我们已经展示了如何通过 Generator 对象生成时间序列和符号表达式数据，并通过 SeriesParams 和 SymbolParams 对象来传入特定的参数来进一步调控其生成过程。">

.. only:: html

  .. image:: /auto_examples/images/thumb/sphx_glr_9-save_and_load_s2data_thumb.png
    :alt:

  :ref:`sphx_glr_auto_examples_9-save_and_load_s2data.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">How to Save and Load S^2 data</div>
    </div>


.. only:: not html

 * :ref:`sphx_glr_auto_examples_9-save_and_load_s2data.py`

.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="In this section, we provide a detailed analysis and proof of the time complexity of the S^2 data generation mechanism. Our theoretical analysis shows that the time complexity of data generation is proportional to the length L of the time series. We will then verify the specific time required for data generation using multiple sets of different lengths to validate our theoretical analysis.">

.. only:: html

  .. image:: /auto_examples/images/thumb/sphx_glr_17-time_complexity_analysis_thumb.png
    :alt:

  :ref:`sphx_glr_auto_examples_17-time_complexity_analysis.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Time Complexity Analysis for The S^2 Data Generation</div>
    </div>


.. only:: not html

 * :ref:`sphx_glr_auto_examples_17-time_complexity_analysis.py`

.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="In this example we will go into detail and show how to generate motivating time series data from a mixture distribution.   This method came from the SNIP in the domain of Symbolic Regression. It has subsequently further extended in SymTime to make it applicable to time series data.   In this method, we will first randomly generate the number of mixed distributions k \in [k_{min}, k_{max}]. For each mixed distribution we then determine its specific type, and choose whether to use the normal distribution \mathcal{N}(\mu, \sigma^2) or the uniform distribution \mathcal{U}(\mathrm{a}, \mathrm{b}) according to the specified probability p_{\mathrm{select}}. Normally, the default value is p_{\mathrm{select}} = 0.5.">

.. only:: html

  .. image:: /auto_examples/images/thumb/sphx_glr_4-mixed_distribution_thumb.png
    :alt:

  :ref:`sphx_glr_auto_examples_4-mixed_distribution.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Excitation Generation via Mixed Distribution</div>
    </div>


.. only:: not html

 * :ref:`sphx_glr_auto_examples_4-mixed_distribution.py`

.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="This method is primarily inspired by adaptive decomposition algorithms in signal processing. For the first few methods, the excitation time series sampled from a mixed distribution exhibit strong randomness. The excitation time series sampled from an ARMA(p, q) model primarily reflect the continuity and temporal dependencies of time series data (mainly in terms of trend characteristics). In contrast, time series generated by methods such as ForecastPFN and KernelSynth incorporate both trend and periodic characteristics of time series. Therefore, to specifically capture the periodicity of time series data, we generate excitation time series data based on the perspective of intrinsic mode functions, leveraging the PySDKit project.">

.. only:: html

  .. image:: /auto_examples/images/thumb/sphx_glr_8-intrinsic_mode_function_thumb.png
    :alt:

  :ref:`sphx_glr_auto_examples_8-intrinsic_mode_function.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Excitation Generation via Intrinsic Mode Function</div>
    </div>


.. only:: not html

 * :ref:`sphx_glr_auto_examples_8-intrinsic_mode_function.py`

.. thumbnail-parent-div-close

.. raw:: html

    </div>

