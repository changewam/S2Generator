
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\3-excitation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_3-excitation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_3-excitation.py:


The Generation for Excitation Time Series
==================================================

This module will detail the generation and manipulation of our excitation time series data.
The diversity of our :math:`S^2` data generation mechanisms is primarily due to two factors: (1) the diversity of generated symbolic expressions (complex systems) :math:`f(\cdot)`; and (2) the diversity of generated excitation time series data :math:`X`.

We incorporate five different excitation time series generation mechanisms into the `Excitation <https://github.com/wwhenxuan/S2Generator/blob/main/S2Generator/excitation/_interface.py>`_ object, including:

- `MixedDistribution <https://github.com/wwhenxuan/S2Generator/blob/main/S2Generator/excitation/mixed_distribution.py>`_ : Mainly from the field of symbolic regression `SNIP <https://arxiv.org/abs/2310.02227>`_ , this method is obtained by sampling from a mixture of Gaussian and uniform distributions.
- `AutoregressiveMovingAverage <https://github.com/wwhenxuan/S2Generator/blob/main/S2Generator/excitation/autoregressive_moving_average.py>`_ : This method comes from the field of time series analysis of `SymTime <#>`_ , which constructs a stationary time series as the excitation signal by building a random parameterized ARMA model.
- `ForecastPFN <https://github.com/wwhenxuan/S2Generator/blob/main/S2Generator/excitation/forecast_pfn.py>`_ : This method is derived from `ForecastPFN <https://arxiv.org/abs/2311.01933>`_ , which is used to train zero-shot forecasting models on synthetic time series data. It considers time series data as a composition of trends and cycles based on the decomposition idea.
- `KernelSynth <https://github.com/wwhenxuan/S2Generator/blob/main/S2Generator/excitation/kernel_synth.py>`_ : This method comes from `Chronos <https://arxiv.org/abs/2403.07815>`_ and generates excitation signals by constructing different periods and trends in the form of a combination of multiple different linear and nonlinear kernels.
- `IntrinsicModeFunction <https://github.com/wwhenxuan/S2Generator/blob/main/S2Generator/excitation/intrinsic_mode_functions.py>`_ : This method is based on the idea of signal decomposition in `PySDKit <https://github.com/wwhenxuan/PySDKit>`_ and constructs the excitation signal by combining the eigenmode function with different signal and noise sequences.

.. GENERATED FROM PYTHON SOURCE LINES 21-39

.. code-block:: Python


    import numpy as np
    import matplotlib.pyplot as plt

    from S2Generator import Excitation, SeriesParams
    from S2Generator.excitation import (
        MixedDistribution,
        AutoregressiveMovingAverage,
        ForecastPFN,
        KernelSynth,
        IntrinsicModeFunction,
    )

    # Building a general interface to stimulate time series data generation
    excitation = Excitation()  # Leave blank to use default parameters

    print(excitation)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Excitation




.. GENERATED FROM PYTHON SOURCE LINES 40-41

We can generate stimulus time series data using the ``__call__`` method or the reserved ``generate`` method. The prerequisite is to pass in a random number generator with a specified random seed, and specify the length and dimension of the sequence.

.. GENERATED FROM PYTHON SOURCE LINES 43-56

.. code-block:: Python


    # Create the random number generator in NumPy
    rng = np.random.RandomState(42)

    # Generate the Excitation Time Series
    time_series, choice_list = excitation.generate(
        rng=rng, n_inputs_points=256, input_dimension=6, return_choice=True
    )

    print("The shape of the time series is:", time_series.shape)
    print("The choice list is:", choice_list)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The shape of the time series is: (256, 6)
    The choice list is: ['forecast_pfn' 'intrinsic_mode_function' 'kernel_synth' 'forecast_pfn'
     'autoregressive_moving_average' 'autoregressive_moving_average']




.. GENERATED FROM PYTHON SOURCE LINES 57-69

.. code-block:: Python


    # Visualize the Generated time series data
    fig, ax = plt.subplots(nrows=2, ncols=3, figsize=(16, 7), dpi=250, sharex=True)

    for i in range(2):
        for j in range(3):
            # Plotting the time series
            ax[i, j].plot(time_series[:, i * 3 + j], color="royalblue")
            # Mark the sampling type
            ax[i, j].set_title(choice_list[i * 3 + j])





.. image-sg:: /auto_examples/images/sphx_glr_3-excitation_001.png
   :alt: forecast_pfn, intrinsic_mode_function, kernel_synth, forecast_pfn, autoregressive_moving_average, autoregressive_moving_average
   :srcset: /auto_examples/images/sphx_glr_3-excitation_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 70-71

During data generation, we randomly select one of five methods for each channel's time series based on a specified probability. Users can specify the probability of the selected method for generating the stimulus time series data using the ``SeriesParams`` parameter.

.. GENERATED FROM PYTHON SOURCE LINES 73-90

.. code-block:: Python


    # The probability of artificially specifying the data generation method
    series_params = SeriesParams(
        forecast_pfn=0.9,
        mixed_distribution=0.0,
        autoregressive_moving_average=0.0,
        kernel_synth=0.0,
        intrinsic_mode_function=0.1,
    )

    # Create the new generator for excitation
    excitation = Excitation(series_params=series_params)

    # Print the prob array for select
    series_params.prob_array, excitation.prob_array






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (array([0. , 0. , 0.9, 0. , 0.1]), array([0. , 0. , 0.9, 0. , 0.1]))



.. GENERATED FROM PYTHON SOURCE LINES 91-107

.. code-block:: Python


    # Generate the New Excitation Time Series
    time_series, choice_list = excitation.generate(
        rng=rng, n_inputs_points=256, input_dimension=6, return_choice=True
    )

    # Visualize the Generated time series data
    fig, ax = plt.subplots(nrows=2, ncols=3, figsize=(16, 7), dpi=250, sharex=True)

    for i in range(2):
        for j in range(3):
            # Plotting the time series
            ax[i, j].plot(time_series[:, i * 3 + j], color="royalblue")
            # Mark the sampling type
            ax[i, j].set_title(choice_list[i * 3 + j])




.. image-sg:: /auto_examples/images/sphx_glr_3-excitation_002.png
   :alt: forecast_pfn, forecast_pfn, forecast_pfn, intrinsic_mode_function, forecast_pfn, forecast_pfn
   :srcset: /auto_examples/images/sphx_glr_3-excitation_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 108-113

For each specific method for generating time series data, you can also pass in specific parameters for control and instantiation.

Using the default parameters will meet most basic data generation requirements.

Next we will further demonstrate and analyze this process:

.. GENERATED FROM PYTHON SOURCE LINES 115-142

.. code-block:: Python


    # Create the figure for visualization
    fig, ax = plt.subplots(5, ncols=1, figsize=(12, 9), dpi=200, sharex=True)

    # Iterate over each different method and instantiate it
    for idx, method in enumerate(
        [
            MixedDistribution,
            AutoregressiveMovingAverage,
            ForecastPFN,
            KernelSynth,
            IntrinsicModeFunction,
        ]
    ):
        # Create directly using completely default parameters
        generator = method()
        # Execute the general `generate` method to generate data
        time_series = generator.generate(
            rng=np.random.RandomState(0), n_inputs_points=512, input_dimension=1
        )
        print("We create the excitation generator for {}".format(str(generator)))

        # Visualize the generate results
        ax[idx].plot(time_series, color="royalblue")

        # Set the y label for the name of excitation
        ax[idx].set_ylabel(str(generator))



.. image-sg:: /auto_examples/images/sphx_glr_3-excitation_003.png
   :alt: 3 excitation
   :srcset: /auto_examples/images/sphx_glr_3-excitation_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    We create the excitation generator for MixedDistribution
    We create the excitation generator for ARMA
    We create the excitation generator for ForecastPFN
    We create the excitation generator for KernelSynth
    We create the excitation generator for IntrinsicModeFunction





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.955 seconds)


.. _sphx_glr_download_auto_examples_3-excitation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 3-excitation.ipynb <3-excitation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 3-excitation.py <3-excitation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 3-excitation.zip <3-excitation.zip>`


.. include:: 3-excitation.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
