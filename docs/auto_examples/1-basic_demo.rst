
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\1-basic_demo.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_1-basic_demo.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_1-basic_demo.py:


The Demo of :math:`S^2` Generator for Series-Symbol Data Generation
===================================================================

Time series data serves as the external manifestation of complex dynamical systems. This method aims to generate diverse complex systems represented by symbolic expressions :math:`f(\cdot)` â€” through unconstrained construction. It simultaneously generates excitation time series :math:`X \in \mathbb{R} ^ {M \times L}`, which are then fed into the complex systems to produce their responses :math:`Y=f(X) \in \mathbb{R} ^ {N \times L}`. Here, :math:`M`, :math:`N` and :math:`L` denote the number of input channels, output channels, and series length, respectively.

**Note: Because the values of the stimulus time series can inflate or fall outside the domain of complex systems, the following examples may not work if your Python version and library version are inconsistent with ours. In this case, please adjust the random seed value in the random number generator.**

.. GENERATED FROM PYTHON SOURCE LINES 13-26

.. code-block:: Python


    import numpy as np
    import sys
    import os

    sys.path.append(os.path.abspath(".."))

    # Importing data generators, parameter controllers and visualization functions
    from S2Generator import Generator, SeriesParams, SymbolParams, plot_series, print_hello

    print_hello()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Hello, S2Generator!
    ==============================
    Version: 0.0.2
    This is a Python package for generating time series data with symbolic representations.
    For more information, please visit: https://github.com/wwhenxuan/S2Generator

       _____   ___     _____                                        _                  
      / ____| |__ \   / ____|                                      | |                 
     | (___      ) | | |  __    ___   _ __     ___   _ __    __ _  | |_    ___    _ __ 
      \___ \    / /  | | |_ |  / _ \ | '_ \   / _ \ | '__|  / _` | | __|  / _ \  | '__|
      ____) |  / /_  | |__| | |  __/ | | | | |  __/ | |    | (_| | | |_  | (_) | | |   
     |_____/  |____|  \_____|  \___| |_| |_|  \___| |_|     \__,_|  \__|  \___/  |_|                                   





.. GENERATED FROM PYTHON SOURCE LINES 27-35

.. code-block:: Python


    # Adjust the parameters here
    # Create a parameter controls the generation of the excitation time series
    series_params = SeriesParams()

    # Create a parameter controls the generation of the symbolic expression (complex systems)
    symbol_params = SymbolParams()








.. GENERATED FROM PYTHON SOURCE LINES 36-44

The core of the :math:`S^2` data generation mechanism is to randomly construct a large number of symbolic expressions (complex systems) :math:`f(\cdot)` and stimulus time series :math:`X`, and obtain the response of the complex system by inputting the stimulus into the complex system:

.. math::
   Y = f(X)

where, the sampling multivariate time series :math:`X = \left [ x_1, x_2, \cdots, x_m \right ]  \in \mathbb{R}^{M \times L}` and the generated multivariate time series :math:`Y = \left [ y_1, y_2, \cdots, y_m \right ]  \in \mathbb{R}^{N \times L}`. :math:`M` and :math:`N` are the input and output dimension for the time series, :math:`L` is the length of points of the time series data.

After constructing the input parameters, we can complete this process end-to-end by creating a data generation object and executing the `run` method.

.. GENERATED FROM PYTHON SOURCE LINES 44-62

.. code-block:: Python


    # Create an instance
    generator = Generator(series_params=series_params, symbol_params=symbol_params)

    # Creating a random number object
    rng = np.random.RandomState(0)

    # Start generating symbolic expressions, sampling and generating series
    trees, x, y = generator.run(
        rng, input_dimension=1, output_dimension=1, n_inputs_points=256
    )
    # Print the expressions
    print(trees)

    # Visualize the time series
    fig = plot_series(x, y)





.. image-sg:: /auto_examples/images/sphx_glr_1-basic_demo_001.png
   :alt: Input Data, Output Data
   :srcset: /auto_examples/images/sphx_glr_1-basic_demo_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (73.5 add (x_0 mul (((9.38 mul cos((-0.092 add (-6.12 mul x_0)))) add (87.1 mul arctan((-0.965 add (0.973 mul rand))))) sub (8.89 mul exp(((4.49 mul log((-29.3 add (-86.2 mul x_0)))) add (-2.57 mul ((51.3 add (-55.6 mul x_0)))**2)))))))




.. GENERATED FROM PYTHON SOURCE LINES 63-76

.. code-block:: Python


    # Try to generate the 2-channels and longer time series
    trees, x, y = generator.run(
        rng,
        input_dimension=2,
        output_dimension=2,
        n_inputs_points=512,
        output_normalize="z-score",
    )
    print(trees)
    fig = plot_series(x, y)





.. image-sg:: /auto_examples/images/sphx_glr_1-basic_demo_002.png
   :alt: Input Data, Output Data
   :srcset: /auto_examples/images/sphx_glr_1-basic_demo_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (0.694 add ((-86.9 mul x_1) sub ((-6.71 mul -7) sub (94.6 mul (x_1 mul x_1))))) | (0.878 add (0.913 mul x_0))




.. GENERATED FROM PYTHON SOURCE LINES 77-90

.. code-block:: Python


    # Try to generate the 3-channels time series
    trees, x, y = generator.run(
        rng,
        input_dimension=3,
        output_dimension=3,
        n_inputs_points=512,
        output_normalize="z-score",
    )
    print(trees)
    fig = plot_series(x, y)





.. image-sg:: /auto_examples/images/sphx_glr_1-basic_demo_003.png
   :alt: Input Data, Output Data
   :srcset: /auto_examples/images/sphx_glr_1-basic_demo_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (0.697 add (diff(((-0.57 mul sqrt((-5.45 add (6.2 mul x_0)))) sub (44.2 mul ((-0.988 add (-0.469 mul x_1)))**2))) mul inv(((0.683 mul ((-9.62 add (-3.06 mul x_1)))**2) add (-7.8 mul x_2))))) | (-8.44 add (exp((-9.1 add (-21.1 mul x_1))) mul ((-0.93 mul x_2) add (-5.86 mul sqrt(((-0.24 mul ((6.48 add (-0.606 mul x_2)))**2) sub (49.4 mul sqrt((6.85 add (1.18 mul euler_gamma)))))))))) | (-0.406 add (-72.4 mul x_2))




.. GENERATED FROM PYTHON SOURCE LINES 91-95

.. code-block:: Python


    # Save the plotting time series
    fig.savefig("../images/ID3_OD3.jpg", dpi=300, bbox_inches="tight")









.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.854 seconds)


.. _sphx_glr_download_auto_examples_1-basic_demo.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 1-basic_demo.ipynb <1-basic_demo.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 1-basic_demo.py <1-basic_demo.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 1-basic_demo.zip <1-basic_demo.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
